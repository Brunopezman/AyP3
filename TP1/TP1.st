Object subclass: #AlgoOlimpicos	instanceVariableNames: 'atleta criterio gestor'	classVariableNames: ''	package: 'TP1'!!AlgoOlimpicos methodsFor: 'accessing' stamp: '9/17/2024 16:13'!establecerCriterio: unCriterio	criterio:= unCriterio. ! !!AlgoOlimpicos methodsFor: 'initialization' stamp: '9/20/2024 11:54'!initialize    gestor:= GestorDeAtletas new.! !!AlgoOlimpicos methodsFor: 'not defined category' stamp: 'BrunoPezman 10/8/2024 15:38'!pesoMaximoDe: unNombre   "Devuelve el peso maximo que puede levantar el atleta pasado por parametro"   ^(gestor buscarAtletaPorNombre: unNombre) pesoMaximo.! !!AlgoOlimpicos methodsFor: 'not defined category' stamp: '9/20/2024 12:27'!obtenerAtletaSegunCriterio	^(gestor seleccionarAtletaSegunCriterio: criterio) nombre.! !!AlgoOlimpicos methodsFor: 'as yet unclassified' stamp: 'BrunoPezman 10/12/2024 18:06'!registrarAtletaConNombre: unNombre dePeso: unPeso yAltura: unaAltura yEdad: unaEdad yNacionalidad: unPais       atleta := Atleta conNombre: unNombre yPeso: unPeso yAltura: unaAltura yEdad: unaEdad yNacionalidad: unPais.   gestor agregarAtleta: atleta.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AlgoOlimpicos class	instanceVariableNames: 'criterio algoOlimpicos'!!AlgoOlimpicos class methodsFor: 'not defined category' stamp: 'BrunoPezman 10/9/2024 11:22'!conCriterioMas: unCriterioTexto    criterio := Criterio deMas: unCriterioTexto.	algoOlimpicos := self new.   algoOlimpicos establecerCriterio: criterio.   ^ algoOlimpicos.! !Error subclass: #AlturaInvalidaError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Object subclass: #Atleta	instanceVariableNames: 'altura edad pesoMaximo nombre nacionalidad peso'	classVariableNames: ''	package: 'TP1'!!Atleta methodsFor: 'not defined category' stamp: 'BrunoPezman 10/15/2024 15:31'!inicializarCon: unNombre yPeso: unPeso yAltura: unaAltura yEdad: unaEdad yNacionalidad: unaNacionalidad	"Validaciones"	(unNombre size < 3) ifTrue: [ NombreInvalidoError signal: 'NombreInvalido' ]. 	(unaNacionalidad  size < 3) ifTrue: [ NacionalidadInvalidaError  signal: 'NombreInvalido' ].    (unPeso <= 45) ifTrue: [ PesoInvalidoError signal: 'Peso invalido'].   (unaAltura <= 1.40) ifTrue: [ AlturaInvalidaError signal: 'Altura invalida'].   (unaEdad < 18) ifTrue: [ EdadInvalidaError signal: 'Edad invalida'].	nombre:= unNombre.	altura:= unaAltura.	peso:= unPeso.	nacionalidad:= Nacionalidad new inicializarCon: unaNacionalidad. 	edad:= Edad inicializarCon: unaEdad. 	! !!Atleta methodsFor: 'not defined category' stamp: 'BrunoPezman 10/15/2024 15:50'!pesoMaximo 	| pesoBase pesoAmplificado |	pesoBase:= edad calcularSegunEdad: peso y: altura.	pesoAmplificado:= nacionalidad calcularConFactor: pesoBase.	^PesoMaximo conValor: pesoAmplificado.   ! !!Atleta methodsFor: 'not defined category' stamp: 'BrunoPezman 10/12/2024 18:30'!compararNombreCon: unNombre   ^ nombre = unNombre.! !!Atleta methodsFor: 'accessing' stamp: 'BrunoPezman 10/8/2024 13:24'!nombre	^nombre! !!Atleta methodsFor: 'accessing' stamp: 'BrunoPezman 10/10/2024 21:53'!nombre: unNombre	nombre := unNombre.! !!Atleta methodsFor: 'accessing' stamp: 'BrunoPezman 10/10/2024 21:54'!edad: unaEdad	edad:= unaEdad. ! !!Atleta methodsFor: 'accessing' stamp: 'BrunoPezman 10/10/2024 21:53'!altura: unaAltura	altura := unaAltura. ! !!Atleta methodsFor: 'accessing' stamp: 'BrunoPezman 10/12/2024 19:51'!nacionalidad: unaNacionalidad	nacionalidad:= unaNacionalidad.  ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Atleta class	instanceVariableNames: 'atleta'!!Atleta class methodsFor: 'not defined category' stamp: 'BrunoPezman 10/12/2024 18:06'!conNombre: unNombre yPeso: unPeso yAltura: unaAltura yEdad: unaEdad yNacionalidad: unaNacionalidad	atleta:= self new.	atleta inicializarCon: unNombre yPeso: unPeso yAltura: unaAltura yEdad: unaEdad yNacionalidad: unaNacionalidad.	 ^atleta.! !Error subclass: #AtletaNoEncontradoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Object subclass: #Criterio	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Criterio methodsFor: 'as yet unclassified' stamp: '9/18/2024 09:44'!seleccionar: atletas	self subclassResponsibility. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Criterio class	instanceVariableNames: ''!!Criterio class methodsFor: 'not defined category' stamp: 'BrunoPezman 10/9/2024 11:21'!deMas: unCriterioTexto    "Devuelve una instancia de CriterioFuerte o CriterioDebil basada en el texto proporcionado."    (unCriterioTexto = 'Fuerte') ifTrue: [^ CriterioFuerte new].    (unCriterioTexto = 'Debil') ifTrue: [^ CriterioDebil new].    CriterioInvalidoError signal: 'Criterio no válido'.! !Criterio subclass: #CriterioDebil	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!CriterioDebil methodsFor: 'not defined category' stamp: 'BrunoPezman 10/13/2024 19:12'!seleccionar: atletas    ^ atletas detectMin: [:a | a pesoMaximo valor]! !Criterio subclass: #CriterioFuerte	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!CriterioFuerte methodsFor: 'not defined category' stamp: 'BrunoPezman 10/13/2024 19:12'!seleccionar: atletas    ^ atletas detectMax: [:a | a pesoMaximo valor].! !Error subclass: #CriterioInvalidoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Object subclass: #Edad	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Edad methodsFor: 'as yet unclassified' stamp: 'BrunoPezman 10/15/2024 15:16'!calcularSegunEdad: unPeso y: unaAltura	self subclassResponsibility. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Edad class	instanceVariableNames: ''!!Edad class methodsFor: 'not defined category' stamp: 'BrunoPezman 10/15/2024 15:18'!inicializarCon: unaEdad	^(unaEdad < 31)		ifTrue: [ EdadJoven new ]		ifFalse: [ EdadVeterano new ].! !Error subclass: #EdadInvalidaError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Edad subclass: #EdadJoven	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!EdadJoven methodsFor: 'not defined category' stamp: 'BrunoPezman 10/15/2024 15:20'!calcularSegunEdad: unPeso y: unaAltura	^ unPeso * unaAltura * (unaAltura - 1).! !Edad subclass: #EdadVeterano	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!EdadVeterano methodsFor: 'not defined category' stamp: 'BrunoPezman 10/15/2024 15:19'!calcularSegunEdad: unPeso y: unaAltura	^ unPeso * unaAltura. ! !Object subclass: #GestorDeAtletas	instanceVariableNames: 'atletas'	classVariableNames: ''	package: 'TP1'!!GestorDeAtletas methodsFor: 'not defined category' stamp: '9/20/2024 12:25'!seleccionarAtletaSegunCriterio: unCriterio   ^ unCriterio seleccionar: atletas.! !!GestorDeAtletas methodsFor: 'not defined category' stamp: 'BrunoPezman 10/12/2024 18:43'!buscarAtletaPorNombre: unNombre 	^ atletas detect: [:each | each compararNombreCon: unNombre]         ifNone: [AtletaNoEncontradoError signal: 'Atleta no encontrado'].! !!GestorDeAtletas methodsFor: 'as yet unclassified' stamp: 'BrunoPezman 10/9/2024 11:30'!agregarAtleta: unAtleta    atletas add: unAtleta.! !!GestorDeAtletas methodsFor: 'initialization' stamp: 'BrunoPezman 10/10/2024 22:38'!atletas 		^atletas. ! !!GestorDeAtletas methodsFor: 'initialization' stamp: '9/20/2024 11:42'!initialize    atletas:= OrderedCollection new.! !Object subclass: #Nacionalidad	instanceVariableNames: 'limitrofes local amplificador'	classVariableNames: ''	package: 'TP1'!!Nacionalidad methodsFor: 'as yet unclassified' stamp: 'BrunoPezman 10/13/2024 19:25'!initialize 	local:= 'Francia'.	limitrofes:= OrderedCollection withAll: {'Alemania' . 'Bélgica' . 'Italia' . 'Luxemburgo' . 'Mónaco' . 'España' . 'Suiza'}.! !!Nacionalidad methodsFor: 'not defined category' stamp: 'BrunoPezman 10/15/2024 15:27'!calcularConFactor: unValor 	self subclassResponsibility. ! !!Nacionalidad methodsFor: 'not defined category' stamp: 'BrunoPezman 10/15/2024 15:26'!inicializarCon: unPais	(local = unPais) ifTrue: [ ^ Local new ].	(limitrofes includes: unPais) ifTrue: [ ^ Limitrofe new ].		^ Extranjero new.! !Nacionalidad subclass: #Extranjero	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Extranjero methodsFor: 'not defined category' stamp: 'BrunoPezman 10/14/2024 15:42'!calcularConFactor: unValor 	^amplificador * unValor.  ! !!Extranjero methodsFor: 'not defined category' stamp: 'BrunoPezman 10/9/2024 12:44'!initialize 	amplificador:= 1.0! !Nacionalidad subclass: #Limitrofe	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Limitrofe methodsFor: 'accessing' stamp: 'BrunoPezman 10/14/2024 15:42'!calcularConFactor: unValor	^amplificador * unValor. ! !!Limitrofe methodsFor: 'accessing' stamp: 'BrunoPezman 10/9/2024 12:45'!initialize 	amplificador:= 1.10! !Nacionalidad subclass: #Local	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Local methodsFor: 'not defined category' stamp: 'BrunoPezman 10/14/2024 15:42'!calcularConFactor: unValor	^amplificador * unValor.! !!Local methodsFor: 'not defined category' stamp: 'BrunoPezman 10/9/2024 12:45'!initialize 	amplificador:= 1.25! !Error subclass: #NacionalidadInvalidaError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Error subclass: #NombreInvalidoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Error subclass: #PesoInvalidoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Object subclass: #PesoMaximo	instanceVariableNames: 'peso'	classVariableNames: ''	package: 'TP1'!!PesoMaximo methodsFor: 'accessing' stamp: 'BrunoPezman 10/14/2024 21:11'!compararCon: unValor precision: unaPrecision 	^(peso - unValor) abs < unaPrecision.! !!PesoMaximo methodsFor: 'accessing' stamp: 'BrunoPezman 10/14/2024 21:12'!compararPesoEnLunaCon: unValor precision: unaPrecision	 ^ (peso * (1.625 / 9.81) - unValor) abs < unaPrecision.! !!PesoMaximo methodsFor: 'not defined category' stamp: 'BrunoPezman 10/14/2024 21:05'!inicializarCon: unPeso	peso:= unPeso.! !!PesoMaximo methodsFor: 'not defined category' stamp: 'BrunoPezman 10/14/2024 21:19'!valor	^peso.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PesoMaximo class	instanceVariableNames: 'pesoMaximo'!!PesoMaximo class methodsFor: 'not defined category' stamp: 'BrunoPezman 10/15/2024 15:50'!conValor: unPeso 	pesoMaximo:= self new.	pesoMaximo inicializarCon: unPeso.	^pesoMaximo.    ! !TestCase subclass: #AlgoOlimpicosTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!AlgoOlimpicosTest methodsFor: 'tests' stamp: 'lw 9/12/2024 17:03'!test03UnAtletaFrancesConCiertoPesoYEdadPuedeLevantarCiertosKilos			| pesoMaximoEsperado pesoMaximoObtenido algoOlimpicos  |		"Arrange"		pesoMaximoEsperado := 182.268.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Fuerte'.		"El atleta es de Francia por lo que mucha gente lo va a apoyar. Va a poder levantar un 25% mas"	"Debido a que es joven (de 30 años o menos), puede levantar un peso que corresponde a su peso multiplicado por su altura, y luego multiplicado por la diferencia entre su altura y uno."	algoOlimpicos registrarAtletaConNombre: 'Romain Imadouchene' dePeso: 96 yAltura: 1.83 yEdad: 28 yNacionalidad: 'Francia'.		"Act"		pesoMaximoObtenido := algoOlimpicos pesoMaximoDe: 'Romain Imadouchene'.		"Assert"	self assert: (pesoMaximoObtenido compararCon: pesoMaximoEsperado precision: precision )! !!AlgoOlimpicosTest methodsFor: 'tests' stamp: 'BrunoPezman 9/26/2024 15:38'!test04EntreUnAtletaYOtroDetectaAlMasDebil	| algoOlimpicos  atletaMasDebilEsperado atletaMasDebilObtenido |		"Arrange"		atletaMasDebilEsperado := 'Romain Imadouchene'.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Debil'.		algoOlimpicos registrarAtletaConNombre: 'Romain Imadouchene' dePeso: 96 yAltura: 1.83 yEdad: 28 yNacionalidad: 'Francia'.	algoOlimpicos registrarAtletaConNombre: 'Lasha Talakhadze' dePeso: 150 yAltura: 1.97 yEdad: 30 yNacionalidad: 'Georgia'.		"Act"		atletaMasDebilObtenido  := algoOlimpicos obtenerAtletaSegunCriterio.		"Assert"	self assert: atletaMasDebilEsperado equals: atletaMasDebilObtenido . ! !!AlgoOlimpicosTest methodsFor: 'tests' stamp: 'BrunoPezman 9/26/2024 15:38'!test05EntreUnAtletaYOtroDetectaAlMasFuerte	| atletaMasFuerteEsperado atletaMasFuerteObtenido algoOlimpicos  |		"Arrange"		atletaMasFuerteEsperado := 'Lasha Talakhadze'.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Fuerte'.		algoOlimpicos registrarAtletaConNombre: 'Romain Imadouchene' dePeso: 96 yAltura: 1.83 yEdad: 28 yNacionalidad: 'Francia'.	algoOlimpicos registrarAtletaConNombre: 'Lasha Talakhadze' dePeso: 150 yAltura: 1.97 yEdad: 30 yNacionalidad: 'Georgia'.		"Act"		atletaMasFuerteObtenido := algoOlimpicos obtenerAtletaSegunCriterio.		"Assert"	self assert: atletaMasFuerteEsperado equals: atletaMasFuerteObtenido! !!AlgoOlimpicosTest methodsFor: 'tests' stamp: 'JG 8/25/2024 20:04'!test06EntreVariosAtletasDetectoAlMasFuerte	| atletaMasFuerteEsperado atletaMasFuerteObtenido algoOlimpicos  |		"Arrange"		atletaMasFuerteEsperado := 'Lasha Talakhadze'.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Fuerte'.		algoOlimpicos registrarAtletaConNombre: 'Romain Imadouchene' dePeso: 96 yAltura: 1.83 yEdad: 28 yNacionalidad: 'Francia'.	algoOlimpicos registrarAtletaConNombre: 'Lasha Talakhadze' dePeso: 150 yAltura: 1.97 yEdad: 30 yNacionalidad: 'Georgia'.	algoOlimpicos registrarAtletaConNombre: 'Antonino Pizzolato' dePeso: 89 yAltura: 1.75 yEdad: 28 yNacionalidad: 'Italia'.	algoOlimpicos registrarAtletaConNombre: 'Yu Dongju' dePeso: 88 yAltura: 1.77 yEdad: 31 yNacionalidad: 'Corea del Sur'.		"Act"		atletaMasFuerteObtenido := algoOlimpicos obtenerAtletaSegunCriterio.		"Assert"	self assert: atletaMasFuerteEsperado equals: atletaMasFuerteObtenido! !!AlgoOlimpicosTest methodsFor: 'tests' stamp: 'JG 8/25/2024 20:04'!test07EntreVariosAtletasDetectoAlMasDebil	| atletaMasDebilEsperado atletaMasDebilObtenido algoOlimpicos  |		"Arrange"		atletaMasDebilEsperado := 'Antonino Pizzolato'.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Debil'.		algoOlimpicos registrarAtletaConNombre: 'Romain Imadouchene' dePeso: 96 yAltura: 1.83 yEdad: 28 yNacionalidad: 'Francia'.	algoOlimpicos registrarAtletaConNombre: 'Lasha Talakhadze' dePeso: 150 yAltura: 1.97 yEdad: 30 yNacionalidad: 'Georgia'.	algoOlimpicos registrarAtletaConNombre: 'Antonino Pizzolato' dePeso: 89 yAltura: 1.75 yEdad: 28 yNacionalidad: 'Italia'.	algoOlimpicos registrarAtletaConNombre: 'Yu Dongju' dePeso: 88 yAltura: 1.77 yEdad: 31 yNacionalidad: 'Corea del Sur'.		"Act"		atletaMasDebilObtenido := algoOlimpicos obtenerAtletaSegunCriterio.		"Assert"	self assert: atletaMasDebilEsperado equals: atletaMasDebilObtenido! !!AlgoOlimpicosTest methodsFor: 'tests' stamp: 'lw 9/12/2024 17:03'!test02UnAtletaDePaisLimitrofeConCiertoPesoYEdadPuedeLevantarCiertosKilos			| pesoMaximoEsperado pesoMaximoObtenido algoOlimpicos  |		"Arrange"		pesoMaximoEsperado := 128.493.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Fuerte'.		"El atleta es de un pais limitrofe a Francia por lo que el apoyo del publico lo ayuda. Va a poder levantar un 10% mas"	"Debido a que es joven (de 30 años o menos), puede levantar un peso que corresponde a su peso multiplicado por su altura, y luego multiplicado por la diferencia entre su altura y uno."	algoOlimpicos registrarAtletaConNombre: 'Antonino Pizzolato' dePeso: 89 yAltura: 1.75 yEdad: 28 yNacionalidad: 'Italia'.		"Act"		pesoMaximoObtenido := algoOlimpicos pesoMaximoDe: 'Antonino Pizzolato'.		"Assert"	self assert: (pesoMaximoObtenido compararCon: pesoMaximoEsperado precision: precision )! !!AlgoOlimpicosTest methodsFor: 'tests' stamp: 'BrunoPezman 10/9/2024 10:34'!test09UnAtletaVeteranoConCiertoPesoYEdadPuedeLevantarCiertosKilos			| pesoMaximoEsperado pesoMaximoObtenido algoOlimpicos  |		"Arrange"		pesoMaximoEsperado := 155.76.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Fuerte'.		"El atleta es de un pais lejano a Francia por lo que no lo apoya mucha gente." 	"Debido a que es veterano (31 años o mas), puede levantar un peso que corresponde a su peso multiplicado por su altura"	algoOlimpicos registrarAtletaConNombre: 'Yu Dongju' dePeso: 88 yAltura: 1.77 yEdad: 31 yNacionalidad: 'Corea del Sur'.		"Act"		pesoMaximoObtenido := algoOlimpicos pesoMaximoDe: 'Yu Dongju'.		"Assert"	self assert: (pesoMaximoObtenido compararCon: pesoMaximoEsperado precision: precision )! !!AlgoOlimpicosTest methodsFor: 'tests' stamp: 'lw 9/12/2024 17:04'!test08UnAtletaConCiertoPesoYEdadPuedeLevantarCiertosKilosEnLaLuna				"Arrange"		| pesoEnLunaEsperado algoOlimpicos pesoMaximoObtenido |	pesoEnLunaEsperado := 47.48.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Fuerte'.		"El atleta es de un pais lejano a Francia por lo que no lo apoya mucha gente." 	"Debido a que es joven (de 30 años o menos), puede levantar un peso que corresponde a su peso multiplicado por su altura, y luego multiplicado por la diferencia entre su altura y uno."	algoOlimpicos registrarAtletaConNombre: 'Lasha Talakhadze' dePeso: 150 yAltura: 1.97 yEdad: 30 yNacionalidad: 'Georgia'.		"Act"		pesoMaximoObtenido := algoOlimpicos pesoMaximoDe: 'Lasha Talakhadze'.			"Assert"	"Peso en la Luna = Peso en la Tierra × (1.625 / 9.81)"	self assert: (pesoMaximoObtenido compararPesoEnLunaCon: pesoEnLunaEsperado  precision: precision )! !!AlgoOlimpicosTest methodsFor: 'as yet unclassified' stamp: '9/15/2024 17:07'!test01UnAtletaConCiertoPesoYEdadPuedeLevantarCiertosKilos			| pesoMaximoEsperado pesoMaximoObtenido algoOlimpicos |		"Arrange"		pesoMaximoEsperado := 286.635.	algoOlimpicos  := AlgoOlimpicos conCriterioMas: 'Fuerte'.		"El atleta es de un pais lejano a Francia por lo que no lo apoya mucha gente." 	"Debido a que es joven (de 30 años o menos), puede levantar un peso que corresponde a su peso multiplicado por su altura, y luego multiplicado por la diferencia entre su altura y uno."	algoOlimpicos registrarAtletaConNombre:'Lasha Talakhadze'  dePeso: 150 yAltura: 1.97 yEdad: 30  yNacionalidad: 'Georgia'.	 	"Act"		pesoMaximoObtenido := algoOlimpicos pesoMaximoDe: 'Lasha Talakhadze'.			"Assert"	self assert: (pesoMaximoObtenido compararCon: pesoMaximoEsperado precision: precision)! !!AlgoOlimpicosTest methodsFor: 'running' stamp: 'JG 8/25/2024 20:22'!setUp	super setUp.	precision := 1e-3.	"Put here a common initialization logic for tests"! !TestCase subclass: #AtletaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!AtletaTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 17:51'!testAtleta02AlturaMenorAMetroCuarentaDevuelveAlturaInvalidaError	| atleta bloque |	"Arrange"		atleta:= Atleta new.	"Act"	bloque:= [atleta inicializarCon:'Lasha Talakhadze' yPeso: 150 yAltura: 1.39 yEdad: 30 yNacionalidad: 'Georgia'].		"Assert"	 self should: bloque raise: AlturaInvalidaError .! !!AtletaTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 17:53'!testAtleta03AlturaNegativaDevuelveAlturaInvalidaError	| atleta bloque |	"Arrange"		atleta:= Atleta new.	"Act"	bloque:= [atleta inicializarCon:'Lasha Talakhadze' yPeso: 150 yAltura: -1 yEdad: 30 yNacionalidad: 'Georgia'].		"Assert"	 self should: bloque raise: AlturaInvalidaError .! !!AtletaTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 17:58'!testAtleta08ValorDePesoNegativoDevuelvePesoInvalidoError	| atleta bloque |	"Arrange"		atleta:= Atleta new.	"Act"	bloque:= [atleta inicializarCon:'Lasha Talakhadze' yPeso: -45 yAltura: 1.75 yEdad: 30 yNacionalidad: 'Georgia'].		"Assert"	 self should: bloque raise: PesoInvalidoError.! !!AtletaTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 17:59'!testAtleta09ValorDeNacionalidadMenorA3LetrasDeVuelveNombreInvalidoError	| atleta bloque |	"Arrange"		atleta:= Atleta new.	"Act"	bloque:= [atleta inicializarCon:'Lasha Talakhadze' yPeso: 85 yAltura: 1.75 yEdad: 30 yNacionalidad: 'Ge'].		"Assert"	 self should: bloque raise: NacionalidadInvalidaError .! !!AtletaTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 18:04'!testAtleta10ValorDeNombreMenorA3LetrasDeVuelveNombreInvalidoError	| atleta bloque |	"Arrange"		atleta:= Atleta new.	"Act"	bloque:= [atleta inicializarCon:'La' yPeso: 85 yAltura: 1.75 yEdad: 30 yNacionalidad: 'Argentina'].		"Assert"	 self should: bloque raise: NombreInvalidoError.! !!AtletaTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 18:28'!testAtleta11NombreDeAtletaComparadoConOtroSonDistintos	| atleta bloque |	"Arrange"		atleta:= Atleta conNombre: 'Carlos' yPeso:85  yAltura: 1.75  yEdad: 30 yNacionalidad: 'Argentina'. 	"Act"	bloque:= [ atleta compararNombreCon: 'juan' ]. 	"Assert"	self deny: bloque .! !!AtletaTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 17:57'!testAtleta06ValorDeEdadMenorA18devuelveEdadInvalidaError	| atleta bloque |	"Arrange"		atleta:= Atleta new.	"Act"	bloque:= [atleta inicializarCon:'Lasha Talakhadze' yPeso: 50 yAltura: 1.70 yEdad: 16 yNacionalidad: 'Georgia'].		"Assert"	 self should: bloque raise: EdadInvalidaError. ! !!AtletaTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 18:17'!testAtleta12NombreDeAtletaComparadoConOtroSonIguales	| atleta bloque |	"Arrange"		atleta:= Atleta conNombre: 'Carlos' yPeso:85  yAltura: 1.75  yEdad: 30 yNacionalidad: 'Argentina'. 	"Act"	bloque:= [ atleta compararNombreCon: 'Carlos' ]. 	"Assert"	self assert: bloque.! !!AtletaTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 17:49'!testAtleta01AlturaIgualAMetroCuarentaDevuelveAlturaInvalidaError	| atleta bloque |	"Arrange"		atleta:= Atleta new.	"Act"	bloque:= [atleta inicializarCon:'Lasha Talakhadze' yPeso: 150 yAltura: 1.40 yEdad: 30 yNacionalidad: 'Georgia'].		"Assert"	 self should: bloque raise: AlturaInvalidaError .! !!AtletaTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 17:55'!testAtleta05ValorDePesoMenorA45DevuelvePesoInvalidoError	| atleta bloque |	"Arrange"		atleta:= Atleta new.	"Act"	bloque:= [atleta inicializarCon:'Lasha Talakhadze' yPeso: 44 yAltura: 1.45 yEdad: 30 yNacionalidad: 'Georgia'].		"Assert"	 self should: bloque raise: PesoInvalidoError.! !!AtletaTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 17:58'!testAtleta07ValorDeEdadNegativaDevuelveEdadInvalidaError	| atleta bloque |	"Arrange"		atleta:= Atleta new.	"Act"	bloque:= [atleta inicializarCon:'Lasha Talakhadze' yPeso: 50 yAltura: 1.70 yEdad: -16 yNacionalidad: 'Georgia'].		"Assert"	 self should: bloque raise: EdadInvalidaError. ! !!AtletaTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 17:53'!testAtleta04ValorDePesoIgualA45DevuelvePesoInvalidoError	| atleta bloque |	"Arrange"		atleta:= Atleta new.	"Act"	bloque:= [atleta inicializarCon:'Lasha Talakhadze' yPeso: 45 yAltura: 1.45 yEdad: 30 yNacionalidad: 'Georgia'].		"Assert"	 self should: bloque raise: PesoInvalidoError.! !!AtletaTest methodsFor: 'tests' stamp: 'BrunoPezman 10/15/2024 15:38'!testAtleta13ConCiertasCaracteristicasTieneDeterminadoPesoMaximo	| atleta obtenido esperado |	"Arrange"		atleta:= Atleta conNombre: 'Carlos' yPeso:150 yAltura: 1.97 yEdad: 30  yNacionalidad: 'Georgia'.	esperado:= 286.635.	"Act"	obtenido:= atleta pesoMaximo valor. 	"Assert"	self assert: obtenido equals: esperado .! !TestCase subclass: #CriterioTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!CriterioTest methodsFor: 'tests' stamp: 'BrunoPezman 10/9/2024 10:52'!testCriterio02CriterioVacioDevuelveCriterioInvalidoError   | algoOlimpicos |   "arrange"   "No se debería poder crear un AlgoOlimpicos con un criterio inválido"   "act"	algoOlimpicos := [AlgoOlimpicos conCriterioMas: ''].   "assert"   self should: algoOlimpicos raise: CriterioInvalidoError.! !!CriterioTest methodsFor: 'tests' stamp: 'BrunoPezman 10/9/2024 11:49'!testCriterio03CriterioNumericoDevuelveCriterioInvalidoError   | algoOlimpicos |   "arrange"   "No se debería poder crear un AlgoOlimpicos con un criterio inválido"   "act"	algoOlimpicos := [AlgoOlimpicos conCriterioMas: 15].   "assert"   self should: algoOlimpicos raise: CriterioInvalidoError.! !!CriterioTest methodsFor: 'tests' stamp: 'BrunoPezman 10/7/2024 23:27'!testCriterio01CriterioInvalidoDevuelveCriterioInvalidoError   | algoOlimpicos |   "arrange"   "No se debería poder crear un AlgoOlimpicos con un criterio inválido"   "act"	algoOlimpicos := [AlgoOlimpicos conCriterioMas: 'Mediocre'].   "assert"   self should: algoOlimpicos raise: CriterioInvalidoError.! !TestCase subclass: #EdadTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!EdadTest methodsFor: 'tests' stamp: 'BrunoPezman 10/15/2024 15:45'!testEdad02calculaPesoMaximoDeUnVeteranoCorrectamente	| edad obtenido esperado |	"arrange"	edad:= EdadVeterano new.	esperado:= 144.5.	"act"	obtenido := edad calcularSegunEdad: 85 y: 1.70 .	"assert"	self assert: obtenido equals: esperado. 	! !!EdadTest methodsFor: 'tests' stamp: 'BrunoPezman 10/15/2024 15:48'!testEdad01calculaPesoMaximoDeUnJovenCorrectamente	| edad obtenido esperado |	"arrange"	edad:= EdadJoven new.	esperado:= 122.4.	"act"	obtenido := edad calcularSegunEdad: 85 y: 1.80 .	"assert"	self assert: obtenido equals: esperado. 	! !TestCase subclass: #GestorDeAtletasTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!GestorDeAtletasTest methodsFor: 'tests' stamp: 'BrunoPezman 10/10/2024 23:28'!testGestor02AgregoUnAtletaAlGestorYSeAgregaCorrectamente	| gestor cantidadEsperada cantidadElementos atleta1 |		"Arrange"		atleta1 := Atleta new.	gestor := GestorDeAtletas new.	cantidadEsperada := 1.		"Act"	gestor agregarAtleta: atleta1.	cantidadElementos := gestor atletas size.		"Assert"	self assert: cantidadElementos equals: cantidadEsperada.! !!GestorDeAtletasTest methodsFor: 'tests' stamp: 'BrunoPezman 10/10/2024 23:30'!testGestor03Agrego3AtletasAlGestorYSeAgreganCorrectamente	| gestor cantidadEsperada cantidadElementos atleta1 atleta2 atleta3 |		"Arrange"		atleta1 := Atleta new.	atleta2 := Atleta new.	atleta3 := Atleta new.	gestor := GestorDeAtletas new.	cantidadEsperada := 3.		"Act"	gestor agregarAtleta: atleta1.	gestor agregarAtleta: atleta2.	gestor agregarAtleta: atleta3.	cantidadElementos := gestor atletas size.		"Assert"	self assert: cantidadElementos equals: cantidadEsperada.! !!GestorDeAtletasTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 18:48'!testGestor05AtletaBuscadoPorSuNombreNoEsEncontradoLanzaAtletaNoEncontradoError		| gestor bloque atleta1 |	"Arrange"		atleta1 := Atleta conNombre: 'Carlos Perez' yPeso: 70 yAltura: 1.70 yEdad: 25 yNacionalidad: 'Argentina'.	gestor := GestorDeAtletas new.	gestor agregarAtleta: atleta1.	"Act"		bloque:= [gestor buscarAtletaPorNombre: 'Paulo Londra'].		"Assert"	self should: bloque raise: AtletaNoEncontradoError. 	! !!GestorDeAtletasTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 18:06'!testGestor08EntreVariosAtletasSeleccionoPorCriterioFuerteCorrectamente		| gestor  atleta1 atleta2 atleta3 atleta4 atletaEsperado atletaObtenido criterio |	"Arrange"		gestor := GestorDeAtletas new.	criterio:= CriterioFuerte new. 	atletaEsperado:= 'Lasha Talakhadze'.	atleta1:= Atleta conNombre: 'Romain Imadouchene' yPeso: 96 yAltura: 1.83 yEdad: 28 yNacionalidad: 'Francia'.	atleta2:= Atleta conNombre: 'Lasha Talakhadze' yPeso: 150 yAltura: 1.97 yEdad: 30 yNacionalidad: 'Georgia'.	atleta3:= Atleta conNombre: 'Antonino Pizzolato' yPeso: 89 yAltura: 1.75 yEdad: 28 yNacionalidad: 'Italia'.	atleta4:= Atleta conNombre: 'Yu Dongju' yPeso: 88 yAltura: 1.77 yEdad: 31 yNacionalidad: 'Corea del Sur'.	gestor agregarAtleta: atleta1.	gestor agregarAtleta: atleta2.	gestor agregarAtleta: atleta3.	gestor agregarAtleta: atleta4.	"Act"		atletaObtenido:= gestor seleccionarAtletaSegunCriterio: criterio .		"Assert"	self assert: atletaObtenido nombre equals: atletaEsperado.  ! !!GestorDeAtletasTest methodsFor: 'tests' stamp: 'BrunoPezman 10/10/2024 23:28'!testGestor01InicializoElGestorYseEncuentraVacio			| gestor cantidadEsperada cantidadElementos |		"Arrange"		gestor := GestorDeAtletas new.	cantidadEsperada := 0.		"Act"	cantidadElementos := gestor atletas size.		"Assert"	self assert: cantidadElementos equals: cantidadEsperada.! !!GestorDeAtletasTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 18:06'!testGestor04AtletaBuscadoPorSuNombreEsEncontrado		| atleta1 gestor atletaEsperado atletaEncontrado |	"Arrange"		atleta1 := Atleta conNombre: 'Carlos Perez' yPeso: 70 yAltura: 1.70 yEdad: 25 yNacionalidad: 'Argentina'.	gestor := GestorDeAtletas new.	atletaEsperado:= 'Carlos Perez'.		"Act"		gestor agregarAtleta: atleta1. 	atletaEncontrado:= gestor buscarAtletaPorNombre: 'Carlos Perez'.		"Assert"	self assert: atletaEncontrado nombre equals: atletaEsperado. 	! !!GestorDeAtletasTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 18:06'!testGestor07Entre2AtletasSeleccionoPorCriterioFuerteCorrectamente		| gestor  atleta1 atleta2  atletaEsperado atletaObtenido criterio |	"Arrange"		gestor := GestorDeAtletas new.	criterio:= CriterioFuerte new. 	atletaEsperado:= 'Lasha Talakhadze'.	atleta1:= Atleta conNombre: 'Romain Imadouchene' yPeso: 96 yAltura: 1.83 yEdad: 28 yNacionalidad: 'Francia'.	atleta2:= Atleta conNombre: 'Lasha Talakhadze' yPeso: 150 yAltura: 1.97 yEdad: 30 yNacionalidad: 'Georgia'.	gestor agregarAtleta: atleta1.	gestor agregarAtleta: atleta2.	"Act"		atletaObtenido:= gestor seleccionarAtletaSegunCriterio: criterio .		"Assert"	self assert: atletaObtenido nombre equals: atletaEsperado.  ! !!GestorDeAtletasTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 18:06'!testGestor06Entre2AtletasSeleccionoPorCriterioDebilCorrectamente		| gestor  atleta1 atleta2  atletaEsperado atletaObtenido criterio |	"Arrange"		gestor := GestorDeAtletas new.	criterio:= CriterioDebil  new. 	atletaEsperado:= 'Romain Imadouchene'.	atleta1:= Atleta conNombre: 'Romain Imadouchene' yPeso: 96 yAltura: 1.83 yEdad: 28 yNacionalidad: 'Francia'.	atleta2:= Atleta conNombre: 'Lasha Talakhadze' yPeso: 150 yAltura: 1.97 yEdad: 30 yNacionalidad: 'Georgia'.	gestor agregarAtleta: atleta1.	gestor agregarAtleta: atleta2.		"Act"		atletaObtenido:= gestor seleccionarAtletaSegunCriterio: criterio .		"Assert"	self assert: atletaObtenido nombre equals: atletaEsperado.  ! !!GestorDeAtletasTest methodsFor: 'tests' stamp: 'BrunoPezman 10/12/2024 18:06'!testGestor09EntreVariosAtletasSeleccionoPorCriterioDebilCorrectamente		| gestor  atleta1 atleta2 atleta3 atleta4 atletaEsperado atletaObtenido criterio |	"Arrange"		gestor := GestorDeAtletas new.	criterio:= CriterioDebil  new. 	atletaEsperado:= 'Antonino Pizzolato'.	atleta1:= Atleta conNombre: 'Romain Imadouchene' yPeso: 96 yAltura: 1.83 yEdad: 28 yNacionalidad: 'Francia'.	atleta2:= Atleta conNombre: 'Lasha Talakhadze' yPeso: 150 yAltura: 1.97 yEdad: 30 yNacionalidad: 'Georgia'.	atleta3:= Atleta conNombre: 'Antonino Pizzolato' yPeso: 89 yAltura: 1.75 yEdad: 28 yNacionalidad: 'Italia'.	atleta4:= Atleta conNombre: 'Yu Dongju' yPeso: 88 yAltura: 1.77 yEdad: 31 yNacionalidad: 'Corea del Sur'.	gestor agregarAtleta: atleta1.	gestor agregarAtleta: atleta2.	gestor agregarAtleta: atleta3.	gestor agregarAtleta: atleta4.	"Act"		atletaObtenido:= gestor seleccionarAtletaSegunCriterio: criterio .		"Assert"	self assert: atletaObtenido nombre equals: atletaEsperado.  ! !TestCase subclass: #NacionalidadTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!NacionalidadTest methodsFor: 'tests' stamp: 'BrunoPezman 10/15/2024 16:03'!testNacionalidad01CalculoConFactorPaisLocalCorrectamente	| valor esperado obtenido nacion |	"arrange"	nacion := Local new.	valor:= 10.	esperado:= 12.5.	"act"	obtenido:= nacion calcularConFactor: valor.	"assert"	self assert: obtenido equals: esperado.  ! !!NacionalidadTest methodsFor: 'tests' stamp: 'BrunoPezman 10/15/2024 16:04'!testNacionalidad03CalculoConFactorPaisExtranjeroCorrectamente	| nacion valor esperado obtenido |	"arrange"	nacion := Extranjero new.	valor:= 10.	esperado:= 10.	"act"	obtenido:= nacion calcularConFactor: valor.	"assert"	self assert: obtenido equals: esperado.  ! !!NacionalidadTest methodsFor: 'tests' stamp: 'BrunoPezman 10/15/2024 16:04'!testNacionalidad02CalculoConFactorPaisLimitrofeCorrectamente	| nacion valor esperado obtenido |	"arrange"	nacion := Limitrofe new.	valor:= 10.	esperado:= 11.	"act"	obtenido:= nacion calcularConFactor: valor.	"assert"	self assert: obtenido equals: esperado.  ! !TestCase subclass: #PesoMaximoTest	instanceVariableNames: 'altura'	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!PesoMaximoTest methodsFor: 'tests' stamp: 'BrunoPezman 10/15/2024 15:53'!testPesoMaximo01CiertoPesoMaximoEsIgualAOtroPesoMaximoEnKilos			| pesoMaximo bloque esperado precision |	"arrange"	pesoMaximo:= PesoMaximo conValor: 96.	esperado:= 96.	precision:= 1e-3.		"act"	bloque:= pesoMaximo compararCon: esperado precision: precision.		"assert"	self assert: bloque. 			! !!PesoMaximoTest methodsFor: 'tests' stamp: 'BrunoPezman 10/15/2024 16:00'!testPesoMaximo02CiertoPesoMaximoEsIgualAOtroPesoMaximoEnKilosLuna		| pesoMaximo bloque esperado precision |	"arrange"	pesoMaximo:= PesoMaximo conValor: 96.	esperado:= 15.902.	precision:= 1e-3.		"act"	bloque:= pesoMaximo compararPesoEnLunaCon: esperado precision: precision.		"assert"	self assert: bloque. 			! !